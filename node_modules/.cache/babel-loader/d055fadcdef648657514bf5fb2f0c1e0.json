{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\n\n/*\r\n * @Author: Hongzhifeng\r\n * @Date: 2022-06-28 15:36:36\r\n * @LastEditors: Hongzhifeng\r\n * @LastEditTime: 2022-07-21 10:04:34\r\n * @Description:\r\n */\n// 想要webpack打包资源，必须引入该资源\n// (五)【core-js】\n// import \"core-js\";// 全部加载\nimport 'core-js/es/promise'; //按需加载\n// 获取配置babel\n// ========================================================\n// (一) 引入css\n\nimport './css/iconfont.css';\nimport './css/index.css'; // 安装：npm i css-loader style-loader -D\n\nimport './less/index.less';\nimport './sass/index.sass'; //npm i sass-loader sass -D\n\nimport './sass/index.scss'; //npm i less-loader -D\n// import './stylus/index.styl';\n// ========================================================\n// (二) 引入js\n\nimport count from './js/count';\nimport sum from './js/sum';\nconsole.log(count(2, 1));\nconsole.log(sum(1, 2, 3, 4)); // 检查eslint、babel语法\n\nlet result1 = count(2, 1);\nconsole.log(result1);\nlet result2 = sum(1, 2, 3, 4, 5);\nconsole.log(result2); // ========================================================\n// (三) 判断是否支持HMR功能,以下代码生产模式下会删除\n\nif (module.hot) {\n  module.hot.accept('./js/count.js', function (count) {\n    const result1 = count(2, 1);\n    console.log('【 判断是否支持HMR功能-result1 】-44', result1);\n    console.log(result1);\n  });\n  module.hot.accept('./js/sum.js', function (sum) {\n    const result2 = sum(1, 2, 3, 4);\n    console.log(result2);\n  });\n} // ========================================================\n// (四) 测试splitChunks配置的按需加载，动态导入\n\n\ndocument.getElementById('splitChunksText_btn').onClick = function () {\n  console.log('【测试splitChunks配置的按需加载，动态导入】-42');\n  /* eslint不能识别动态导入语法，会对动态导入语法（import）报错，需要修改eslint配置文件\r\n  // webpackChunkName: \"math\"：这是webpack动态导入模块命名的方式\r\n   \"math\"将来就会作为[name]的值显示。\r\n  */\n  // 测试动态引入\n\n  import(\n  /* webpackChunkName: \"math\" */\n  './js/math.js').then(_ref => {\n    let {\n      mul\n    } = _ref;\n    console.log('【 (四)按需加载，动态导入 】-42', mul(2, 1));\n  });\n}; // ========================================================\n// (五) core-js添加promise代码\n\n/* babel 能将 ES6 的一些语法进行编译转换，比如箭头函数、...运算符等。\r\n   但是如果是 async 函数、promise 对象、数组的一些方法（includes）等，它没办法处理\r\n   所以此时我们 js 代码仍然存在兼容性问题，一旦遇到低版本浏览器会直接报错。\r\n   所以我们想要将 js 兼容性问题彻底解决，\r\n   【解决方式】：\r\n   ① 可以使用core-js（手动按需引入）\r\n   ② babel（自动动按需引入），推荐\r\n*/\n// (1)测试core-js手动按需引入\n\n\nconst promise = Promise.resolve();\npromise.then(() => {\n  console.log('【 (五-1)测试core-js手动按需引入 】-74', 'hello promise');\n}); // (2)测试babel自动动按需引入\n\nconst arr = [1, 2, 3, 5];\nconsole.log('【 (五-2)测试babel自动动按需引入 】-74', arr.includes(3));","map":{"version":3,"names":["count","sum","console","log","result1","result2","module","hot","accept","document","getElementById","onClick","then","mul","promise","Promise","resolve","arr","includes"],"sources":["E:/study-library/webpack/webpack5/src/main.js"],"sourcesContent":["/*\r\n * @Author: Hongzhifeng\r\n * @Date: 2022-06-28 15:36:36\r\n * @LastEditors: Hongzhifeng\r\n * @LastEditTime: 2022-07-21 10:04:34\r\n * @Description:\r\n */\r\n// 想要webpack打包资源，必须引入该资源\r\n// (五)【core-js】\r\n// import \"core-js\";// 全部加载\r\nimport 'core-js/es/promise'; //按需加载\r\n// 获取配置babel\r\n\r\n// ========================================================\r\n\r\n// (一) 引入css\r\nimport './css/iconfont.css';\r\nimport './css/index.css'; // 安装：npm i css-loader style-loader -D\r\nimport './less/index.less';\r\nimport './sass/index.sass'; //npm i sass-loader sass -D\r\nimport './sass/index.scss'; //npm i less-loader -D\r\n// import './stylus/index.styl';\r\n\r\n// ========================================================\r\n\r\n// (二) 引入js\r\nimport count from './js/count';\r\nimport sum from './js/sum';\r\nconsole.log(count(2, 1));\r\nconsole.log(sum(1, 2, 3, 4));\r\n\r\n// 检查eslint、babel语法\r\nlet result1 = count(2, 1);\r\nconsole.log(result1);\r\nlet result2 = sum(1, 2, 3, 4, 5);\r\nconsole.log(result2);\r\n\r\n// ========================================================\r\n\r\n// (三) 判断是否支持HMR功能,以下代码生产模式下会删除\r\nif (module.hot) {\r\n    module.hot.accept('./js/count.js', function (count) {\r\n        const result1 = count(2, 1);\r\n        console.log('【 判断是否支持HMR功能-result1 】-44', result1)\r\n        console.log(result1);\r\n    });\r\n    module.hot.accept('./js/sum.js', function (sum) {\r\n        const result2 = sum(1, 2, 3, 4);\r\n        console.log(result2);\r\n    });\r\n}\r\n\r\n// ========================================================\r\n\r\n// (四) 测试splitChunks配置的按需加载，动态导入\r\ndocument.getElementById('splitChunksText_btn').onClick = function () {\r\n    console.log('【测试splitChunks配置的按需加载，动态导入】-42');\r\n    /* eslint不能识别动态导入语法，会对动态导入语法（import）报错，需要修改eslint配置文件\r\n    // webpackChunkName: \"math\"：这是webpack动态导入模块命名的方式\r\n     \"math\"将来就会作为[name]的值显示。\r\n    */\r\n    // 测试动态引入\r\n    import(/* webpackChunkName: \"math\" */ './js/math.js').then(({ mul }) => {\r\n        console.log('【 (四)按需加载，动态导入 】-42', mul(2, 1));\r\n    });\r\n};\r\n\r\n// ========================================================\r\n\r\n// (五) core-js添加promise代码\r\n/* babel 能将 ES6 的一些语法进行编译转换，比如箭头函数、...运算符等。\r\n   但是如果是 async 函数、promise 对象、数组的一些方法（includes）等，它没办法处理\r\n   所以此时我们 js 代码仍然存在兼容性问题，一旦遇到低版本浏览器会直接报错。\r\n   所以我们想要将 js 兼容性问题彻底解决，\r\n   【解决方式】：\r\n   ① 可以使用core-js（手动按需引入）\r\n   ② babel（自动动按需引入），推荐\r\n*/\r\n// (1)测试core-js手动按需引入\r\nconst promise = Promise.resolve();\r\npromise.then(() => {\r\n    console.log('【 (五-1)测试core-js手动按需引入 】-74','hello promise');\r\n});\r\n// (2)测试babel自动动按需引入\r\nconst arr = [1, 2, 3, 5];\r\nconsole.log('【 (五-2)测试babel自动动按需引入 】-74', arr.includes(3));\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,oBAAP,C,CAA6B;AAC7B;AAEA;AAEA;;AACA,OAAO,oBAAP;AACA,OAAO,iBAAP,C,CAA0B;;AAC1B,OAAO,mBAAP;AACA,OAAO,mBAAP,C,CAA4B;;AAC5B,OAAO,mBAAP,C,CAA4B;AAC5B;AAEA;AAEA;;AACA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACAC,OAAO,CAACC,GAAR,CAAYH,KAAK,CAAC,CAAD,EAAI,CAAJ,CAAjB;AACAE,OAAO,CAACC,GAAR,CAAYF,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAf,E,CAEA;;AACA,IAAIG,OAAO,GAAGJ,KAAK,CAAC,CAAD,EAAI,CAAJ,CAAnB;AACAE,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACA,IAAIC,OAAO,GAAGJ,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAjB;AACAC,OAAO,CAACC,GAAR,CAAYE,OAAZ,E,CAEA;AAEA;;AACA,IAAIC,MAAM,CAACC,GAAX,EAAgB;EACZD,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,eAAlB,EAAmC,UAAUR,KAAV,EAAiB;IAChD,MAAMI,OAAO,GAAGJ,KAAK,CAAC,CAAD,EAAI,CAAJ,CAArB;IACAE,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CC,OAA1C;IACAF,OAAO,CAACC,GAAR,CAAYC,OAAZ;EACH,CAJD;EAKAE,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,aAAlB,EAAiC,UAAUP,GAAV,EAAe;IAC5C,MAAMI,OAAO,GAAGJ,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAnB;IACAC,OAAO,CAACC,GAAR,CAAYE,OAAZ;EACH,CAHD;AAIH,C,CAED;AAEA;;;AACAI,QAAQ,CAACC,cAAT,CAAwB,qBAAxB,EAA+CC,OAA/C,GAAyD,YAAY;EACjET,OAAO,CAACC,GAAR,CAAY,gCAAZ;EACA;AACJ;AACA;AACA;EACI;;EACA;EAAO;EAA+B,cAAtC,EAAsDS,IAAtD,CAA2D,QAAa;IAAA,IAAZ;MAAEC;IAAF,CAAY;IACpEX,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCU,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAtC;EACH,CAFD;AAGH,CAVD,C,CAYA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,OAAR,EAAhB;AACAF,OAAO,CAACF,IAAR,CAAa,MAAM;EACfV,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA0C,eAA1C;AACH,CAFD,E,CAGA;;AACA,MAAMc,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAZ;AACAf,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0Cc,GAAG,CAACC,QAAJ,CAAa,CAAb,CAA1C"},"metadata":{},"sourceType":"module"}